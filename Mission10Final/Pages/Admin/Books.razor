@page "/admin/books"
@page "/admin"
@inherits OwningComponentBase<IBookRepository>

<table class="table table-sm table-striped table-bordered">

    <thead>
        <tr>
            <th>Book ID</th>
            <th>Book Title</th>
            <th>Publisher</th>
            <th>Category</th>

        </tr>
    </thead>

    <tbody>

        @if (BookData?.Count() != 0)
        {
            // List the projects
            @foreach (Book b in BookData)
            {
                <tr>
                    <td>@b.BookID</td>
                    <td>@b.Title</td>
                    <td>@b.Publisher</td>
                    <td>@b.Category</td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(b.BookID)">Details</NavLink>
                    </td>

                    <td>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(b.BookID)">Edit</NavLink>
                    </td>

                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveBook(b))">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Book</td>
            </tr>
        }

    </tbody>

</table>


<NavLink class="btn btn-primary btn-sm" href="/admin/books/detailscreate">Create</NavLink>

@code
{
    // A Book repo
    public IBookRepository repo => Service;
    // Get a book repo in an enumerable state
    public IEnumerable<Book> BookData { get; set; }

    // When initialized
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    // Set an async function
    public async Task UpdateData()
    {
        // BookData is a list of Books info in the repo
        BookData = await repo.Books.ToListAsync();
    }

    // Set the detail page url
    public string GetDetailsUrl(long id) => $"/admin/books/details/{id}";
    // Set the edit page url
    public string GetEditUrl(long id) => $"/admin/books/detailsedit/{id}";

    // Remove a book
    public async Task RemoveBook(Book b)
    {
        repo.DeleteBook(b);
        await UpdateData();
    }
}
